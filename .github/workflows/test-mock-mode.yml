name: Mock Mode Testing Suite

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Enable debug mode'
        type: boolean
        required: false
        default: false

jobs:
  test-mock-mode:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y sqlite3

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-timeout
        pip install -r requirements.txt

    - name: Verify installation
      run: |
        python -c "import flask; print(f'Flask: {flask.__version__}')"
        python -c "import socketio; print(f'SocketIO: {socketio.__version__}')"
        python -c "import schwabdev; print('schwabdev imported successfully')"

    - name: Create test data directory
      run: |
        mkdir -p data
        mkdir -p test_results

    - name: Run mock data unit tests
      run: |
        python -m pytest mock_data.py::MarketDataStreamingTests -v --tb=short --timeout=30
      continue-on-error: false

    - name: Run integration tests (quick mode)
      run: |
        python test_integration.py --quick
      timeout-minutes: 5
      continue-on-error: false

    - name: Test mock data generation performance
      run: |
        python -c "
        from mock_data import MockMarketDataGenerator
        import time
        
        print('Testing mock data generation performance...')
        generator = MockMarketDataGenerator()
        
        # Test 1: Single quote generation speed
        start = time.time()
        for i in range(1000):
            quote = generator.generate_quote('AAPL')
        single_time = time.time() - start
        print(f'Generated 1000 quotes in {single_time:.3f}s ({1000/single_time:.1f} quotes/sec)')
        
        # Test 2: Multiple symbols
        symbols = ['AAPL', 'MSFT', 'GOOGL', 'TSLA', 'NVDA']
        start = time.time()
        for i in range(200):
            for symbol in symbols:
                quote = generator.generate_quote(symbol)
        multi_time = time.time() - start
        total_quotes = 200 * len(symbols)
        print(f'Generated {total_quotes} quotes for {len(symbols)} symbols in {multi_time:.3f}s ({total_quotes/multi_time:.1f} quotes/sec)')
        
        # Performance assertions
        assert single_time < 2.0, f'Single symbol performance too slow: {single_time:.3f}s'
        assert multi_time < 5.0, f'Multi symbol performance too slow: {multi_time:.3f}s'
        print('✓ Performance tests passed!')
        "

    - name: Test mock streaming functionality
      run: |
        python -c "
        from mock_data import MockSchwabStreamer
        import json
        import time
        import threading
        
        print('Testing mock streaming functionality...')
        
        streamer = MockSchwabStreamer()
        received_messages = []
        
        def message_handler(message):
            try:
                data = json.loads(message)
                received_messages.append(data)
                symbol = data['data'][0]['content'][0]['key']
                price = data['data'][0]['content'][0]['3']  # Last price
                print(f'  📊 {symbol}: \${price}')
            except Exception as e:
                print(f'  ❌ Error: {e}')
        
        # Start streaming
        streamer.start(message_handler)
        streamer.add_symbol('AAPL')
        streamer.add_symbol('MSFT')
        streamer.set_update_interval(0.5)
        
        # Stream for 5 seconds
        print('Streaming for 5 seconds...')
        time.sleep(5)
        
        # Test market events
        print('Testing market events...')
        streamer.simulate_market_event('bullish_surge')
        time.sleep(2)
        
        streamer.simulate_market_event('high_volatility')
        time.sleep(2)
        
        streamer.stop()
        
        # Validate results
        assert len(received_messages) > 0, 'No messages received from streamer'
        print(f'✓ Received {len(received_messages)} messages')
        
        # Validate message format
        sample_msg = received_messages[0]
        assert 'data' in sample_msg, 'Missing data field'
        assert sample_msg['data'][0]['service'] == 'LEVELONE_EQUITIES', 'Wrong service type'
        
        print('✓ Mock streaming tests passed!')
        "

    - name: Test market data manager in mock mode
      run: |
        python -c "
        from market_data import MarketDataManager
        import tempfile
        import os
        
        print('Testing MarketDataManager in mock mode...')
        
        # Create temporary data directory
        with tempfile.TemporaryDirectory() as temp_dir:
            manager = MarketDataManager(temp_dir)
            manager.is_mock_mode = True
            
            # Test database creation
            conn = manager.get_db_connection()
            cursor = conn.cursor()
            
            # Check tables exist
            cursor.execute(\"SELECT name FROM sqlite_master WHERE type='table'\")
            tables = [row[0] for row in cursor.fetchall()]
            assert 'equity_quotes' in tables, 'equity_quotes table not created'
            assert 'data_metadata' in tables, 'data_metadata table not created'
            
            # Test watchlist functionality
            manager.add_symbol('AAPL')
            manager.add_symbol('MSFT')
            watchlist = manager.get_watchlist()
            assert 'AAPL' in watchlist, 'AAPL not in watchlist'
            assert 'MSFT' in watchlist, 'MSFT not in watchlist'
            
            # Test symbol removal
            manager.remove_symbol('AAPL')
            watchlist = manager.get_watchlist()
            assert 'AAPL' not in watchlist, 'AAPL not removed from watchlist'
            assert 'MSFT' in watchlist, 'MSFT incorrectly removed'
            
            conn.close()
            
            print('✓ MarketDataManager tests passed!')
        "

    - name: Test field mapping corrections
      run: |
        python -c "
        from mock_data import MockQuote
        
        print('Testing field mapping corrections...')
        
        # Create test quote
        quote = MockQuote(
            symbol='TEST',
            last_price=100.0,
            bid_price=99.95,
            ask_price=100.05,
            volume=1000000,
            high_price=101.0,
            low_price=99.0,
            net_change=1.0,
            net_change_percent=1.0,
            timestamp=1234567890
        )
        
        # Test Schwab format with correct field mappings
        schwab_format = quote.to_schwab_format()
        
        # Validate correct field mappings
        assert schwab_format['1'] == 99.95, f'Field 1 should be bid price (99.95), got {schwab_format[\"1\"]}'
        assert schwab_format['2'] == 100.05, f'Field 2 should be ask price (100.05), got {schwab_format[\"2\"]}'
        assert schwab_format['3'] == 100.0, f'Field 3 should be last price (100.0), got {schwab_format[\"3\"]}'
        assert schwab_format['8'] == 1000000, f'Field 8 should be volume (1000000), got {schwab_format[\"8\"]}'
        assert schwab_format['10'] == 101.0, f'Field 10 should be high price (101.0), got {schwab_format[\"10\"]}'
        assert schwab_format['11'] == 99.0, f'Field 11 should be low price (99.0), got {schwab_format[\"11\"]}'
        assert schwab_format['18'] == 1.0, f'Field 18 should be net change (1.0), got {schwab_format[\"18\"]}'
        assert schwab_format['42'] == 1.0, f'Field 42 should be net change percent (1.0), got {schwab_format[\"42\"]}'
        
        print('✓ Field mapping tests passed!')
        print('  - Field 1: Bid Price ✓')
        print('  - Field 2: Ask Price ✓') 
        print('  - Field 3: Last Price ✓')
        print('  - Field 8: Volume ✓')
        print('  - Field 10: High Price ✓')
        print('  - Field 11: Low Price ✓')
        print('  - Field 18: Net Change ✓')
        print('  - Field 42: Net Change Percent ✓')
        "

    - name: Generate test data and validate storage
      run: |
        python -c "
        from market_data import MarketDataManager
        from mock_data import MockSchwabStreamer
        import tempfile
        import json
        import time
        
        print('Testing data generation and storage...')
        
        with tempfile.TemporaryDirectory() as temp_dir:
            # Initialize manager
            manager = MarketDataManager(temp_dir)
            manager.is_mock_mode = True
            
            # Create mock streamer
            streamer = MockSchwabStreamer()
            manager.schwab_streamer = streamer
            
            # Add test symbols
            test_symbols = ['AAPL', 'MSFT', 'GOOGL', 'TSLA', 'SPY']
            for symbol in test_symbols:
                manager.add_symbol(symbol)
            
            # Generate and process mock messages
            message_count = 0
            for symbol in test_symbols:
                quote = streamer.data_generator.generate_quote(symbol)
                message = streamer._create_schwab_message(quote)
                manager.schwab_message_handler(message)
                message_count += 1
            
            # Validate data was stored
            market_data = manager.get_market_data()
            assert len(market_data['market_data']) == len(test_symbols), f'Expected {len(test_symbols)} symbols, got {len(market_data[\"market_data\"])}'
            
            # Check database
            conn = manager.get_db_connection()
            cursor = conn.cursor()
            cursor.execute('SELECT COUNT(*) FROM equity_quotes')
            db_count = cursor.fetchone()[0]
            assert db_count == len(test_symbols), f'Expected {len(test_symbols)} database records, got {db_count}'
            
            # Check metadata
            cursor.execute('SELECT data_source FROM data_metadata LIMIT 1')
            data_source = cursor.fetchone()[0]
            assert data_source == 'MOCK', f'Expected MOCK data source, got {data_source}'
            
            conn.close()
            
            print(f'✓ Generated and stored data for {len(test_symbols)} symbols')
            print(f'✓ Processed {message_count} mock messages')
            print(f'✓ Database contains {db_count} records')
            print(f'✓ Data source correctly marked as MOCK')
        "

    - name: Run comprehensive error handling tests
      run: |
        python -c "
        from mock_data import MockMarketDataGenerator, MockSchwabStreamer
        from market_data import MarketDataManager
        import tempfile
        import json
        
        print('Testing error handling and edge cases...')
        
        # Test 1: Invalid symbol handling
        generator = MockMarketDataGenerator()
        
        # Test with empty symbol
        try:
            quote = generator.generate_quote('')
            print('  ⚠ Empty symbol should be handled gracefully')
        except Exception as e:
            print(f'  ✓ Empty symbol properly rejected: {type(e).__name__}')
        
        # Test 2: Invalid message handling
        with tempfile.TemporaryDirectory() as temp_dir:
            manager = MarketDataManager(temp_dir)
            manager.is_mock_mode = True
            
            # Test invalid JSON
            try:
                manager.schwab_message_handler('invalid json')
                print('  ✓ Invalid JSON handled gracefully')
            except Exception as e:
                print(f'  ⚠ Invalid JSON caused error: {e}')
            
            # Test empty message
            try:
                manager.schwab_message_handler('{}')
                print('  ✓ Empty message handled gracefully')
            except Exception as e:
                print(f'  ⚠ Empty message caused error: {e}')
            
            # Test malformed data structure
            try:
                bad_message = json.dumps({'data': [{'service': 'UNKNOWN', 'content': []}]})
                manager.schwab_message_handler(bad_message)
                print('  ✓ Malformed data structure handled gracefully')
            except Exception as e:
                print(f'  ⚠ Malformed data caused error: {e}')
        
        print('✓ Error handling tests completed!')
        "

    - name: Generate test coverage report
      if: matrix.python-version == '3.11'
      run: |
        pip install coverage
        coverage run -m pytest mock_data.py::MarketDataStreamingTests -v
        coverage report --include="mock_data.py,market_data.py" --show-missing
        coverage html --include="mock_data.py,market_data.py" -d test_results/coverage

    - name: Upload test results
      if: always() && matrix.python-version == '3.11'
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.python-version }}
        path: test_results/

    - name: Print test summary
      if: always()
      run: |
        echo "=================================="
        echo "🧪 MOCK MODE TEST SUMMARY"
        echo "=================================="
        echo "Python Version: ${{ matrix.python-version }}"
        echo "OS: ubuntu-latest"
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"
        echo "=================================="
        echo "Tests completed for mock market data streaming!"
        echo "✓ Mock data generation"
        echo "✓ Field mapping validation"  
        echo "✓ Database storage"
        echo "✓ Streaming functionality"
        echo "✓ Error handling"
        echo "✓ Performance validation"
        echo "=================================="

    - name: Debug information
      if: inputs.debug_enabled == true
      run: |
        echo "🔍 DEBUG INFORMATION"
        echo "===================="
        python --version
        pip list
        echo "===================="
        ls -la
        echo "===================="
        if [ -d "data" ]; then
          echo "Data directory contents:"
          ls -la data/
        fi
        echo "===================="

  validate-requirements:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Validate requirements.txt
      run: |
        echo "📋 Validating requirements.txt..."
        
        # Check if requirements.txt exists
        if [ ! -f "requirements.txt" ]; then
          echo "❌ requirements.txt not found!"
          exit 1
        fi
        
        # Check for empty requirements
        if [ ! -s "requirements.txt" ]; then
          echo "❌ requirements.txt is empty!"
          exit 1
        fi
        
        # Try to install requirements
        python -m pip install --upgrade pip
        pip install -r requirements.txt --dry-run
        
        echo "✅ requirements.txt validation passed!"

    - name: Check for security vulnerabilities
      run: |
        pip install safety
        safety check -r requirements.txt --short-report