name: Mock Mode Testing Suite

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Enable debug mode'
        type: boolean
        required: false
        default: false

jobs:
  test-mock-mode:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4.2.2

    - name: Set up Python 3.11
      uses: actions/setup-python@v5.6.0
      with:
        python-version: "3.11"

    - name: Cache pip dependencies
      uses: actions/cache@v4.2.3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y sqlite3

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Verify installation
      run: |
        python -c "import flask; print(f'Flask: {flask.__version__}')"
        python -c "import socketio; print('SocketIO imported successfully')"
        python -c "import schwabdev; print('schwabdev imported successfully')"

    - name: Create test data directory
      run: |
        mkdir -p data
        mkdir -p test_results

    - name: Run basic test suite
      run: |
        python test_integration.py --basic
      timeout-minutes: 5

    - name: Test basic imports
      run: |
        python -c "
        print('Testing basic imports...')
        from mock_data import MockMarketDataGenerator, MockSchwabStreamer
        from market_data import MarketDataManager
        print('‚úì All imports successful')
        "

    - name: Test field mappings
      run: |
        python -c "
        from mock_data import MockQuote
        print('Testing field mappings...')
        quote = MockQuote('TEST', 100.0, 99.95, 100.05, 1000, 101.0, 99.0, 1.0, 1.0, 1234567890)
        schwab_format = quote.to_schwab_format()
        assert schwab_format['1'] == 99.95  # Bid Price
        assert schwab_format['2'] == 100.05 # Ask Price  
        assert schwab_format['3'] == 100.0  # Last Price
        print('‚úì Field mappings correct')
        "



    - name: Print test summary
      if: always()
      run: |
        echo "=================================="
        echo "üß™ MOCK MODE TEST SUMMARY"
        echo "=================================="
        echo "Python Version: 3.11"
        echo "OS: ubuntu-latest"
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"
        echo "=================================="
        echo "Tests completed for mock market data streaming!"
        echo "‚úì Basic test suite"
        echo "‚úì Import validation"
        echo "‚úì Field mapping validation"
        echo "=================================="

    - name: Debug information
      if: inputs.debug_enabled == true
      run: |
        echo "üîç DEBUG INFORMATION"
        echo "===================="
        python --version
        pip list
        echo "===================="
        ls -la
        echo "===================="
        if [ -d "data" ]; then
          echo "Data directory contents:"
          ls -la data/
        fi
        echo "===================="

  validate-requirements:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4.2.2

    - name: Set up Python 3.11
      uses: actions/setup-python@v5.6.0
      with:
        python-version: 3.11

    - name: Validate requirements.txt
      run: |
        echo "üìã Validating requirements.txt..."
        
        # Check if requirements.txt exists
        if [ ! -f "requirements.txt" ]; then
          echo "‚ùå requirements.txt not found!"
          exit 1
        fi
        
        # Check for empty requirements
        if [ ! -s "requirements.txt" ]; then
          echo "‚ùå requirements.txt is empty!"
          exit 1
        fi
        
        # Try to install requirements
        python -m pip install --upgrade pip
        pip install -r requirements.txt --dry-run
        
        echo "‚úÖ requirements.txt validation passed!"

    - name: Check for security vulnerabilities
      run: |
        pip install safety
        safety check -r requirements.txt --short-report